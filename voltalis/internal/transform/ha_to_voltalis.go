package transform

import (
	"context"
	"fmt"

	"github.com/francois76/voltalis-integration/voltalis/internal/mqtt"
)

// Start est le point de d√©marrage de la fonction qui process les √©venements MQTT de fa√ßon globalis√©e et appelle les APIs de voltalis pour r√©pliquer les changements
func Start(ctx context.Context, mqttClient *mqtt.Client) error {
	if err := mqttClient.RegisterController(); err != nil {
		return err
	}
	if err := mqttClient.RegisterHeater(12345678901234, "Salon"); err != nil {
		return err
	}
	if err := mqttClient.RegisterHeater(23456789012345, "Chambre"); err != nil {
		return err
	}

	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	stateChanges := mqttClient.StateManager.Subscribe()

	for {
		select {
		case change := <-stateChanges:
			fmt.Printf("üîÑ Changement d√©tect√©!\n")
			fmt.Printf("   Hash pr√©c√©dent: %s\n", change.PreviousHash[:8]+"...")
			fmt.Printf("   Hash actuel: %s\n", change.CurrentHash[:8]+"...")
			fmt.Printf("   √âtat actuel: %+v\n", change.CurrentState)
			fmt.Printf("   Champs modifi√©s: %+v\n", change.ChangedFields)

			// Ici vous pourriez traiter les changements
			// - Sauvegarder en base
			// - Envoyer des alertes
			// - D√©clencher des actions

		case <-ctx.Done():
			fmt.Println("context killed")
			return nil
		}
	}

}
